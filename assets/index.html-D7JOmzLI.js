import{_ as i,e as n,f as e,o as l}from"./app-DazCwyn3.js";const c="/blog.github.io/assets/09efe920c2514c6cad70fe10f2935ffd~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-B2Sx2koh.webp",t="/blog.github.io/assets/822e3524ba53404d893594cecf19db14~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-DpMw-Ntd.webp",r="/blog.github.io/assets/2194483a5cb64e709dcd0544e7d79511~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-D-kIcSjX.webp",h="/blog.github.io/assets/7418d16f7c874f9cb25912f40deef10a~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-Bq5KAXDZ.webp",a="/blog.github.io/assets/d41e2219fd3546cda7a30bbe231cac3e~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-C4yYvK8I.webp",k="/blog.github.io/assets/ab07f72ab99c47f686d6c20d5f134fd5~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-lmMMPcSK.webp",d="/blog.github.io/assets/9435be67eb764b4682034ce187c4466a~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-ayrS5k39.webp",o="/blog.github.io/assets/c3b5ed86cd76417291424b8312e5f26c~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-CShBQpZA.webp",m="/blog.github.io/assets/22a890f4e5d246b2b8a96b161f338fdf~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-DymJ1vpK.webp",g="/blog.github.io/assets/7bac7f31b42d4667bbd0793710b60ef5~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-CmXl_IyZ.webp",b="/blog.github.io/assets/0930bf68605f4c269a721678ba511333~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-DrDQmu3h.webp",u="/blog.github.io/assets/0b7088ece3d24c279297e8aeebf675c1~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-GHFk6Pkg.webp",_="/blog.github.io/assets/41d1883794b54d1f816c67019127d363~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-C46-FJmP.webp",v="/blog.github.io/assets/27bc3fb2de0e4c3e820705e14add4453~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-D1e67YCl.webp",y="/blog.github.io/assets/3b325bb4d64c484e95fa2a848955d7b8~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-CAJAuMOa.webp",f="/blog.github.io/assets/d2aab90372c548a7b798e170cf9057a5~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-CwKVNn-Y.webp",A="/blog.github.io/assets/0d3e7a66705147aeab5f172384155a2b~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-DqKyohyd.webp",B="/blog.github.io/assets/e37f2cda23c84ee19a89dd6799927830~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-DNR0EW9o.webp",D="/blog.github.io/assets/437749ca94a245e391e6e7415646bbeb~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-C46s9V4Q.webp",j="/blog.github.io/assets/bd2bdadee106476696b8a1e0afacd699~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-B5MTAaTU.webp",C="/blog.github.io/assets/a63e1a3e15494b02be66619cea1ed541~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-TIYrI4eg.webp",w="/blog.github.io/assets/b83161186ba7482bb0c51e7650f29d67~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-DviKFFY1.webp",q="/blog.github.io/assets/636c3ba1ec334eba8fe2c0245ffec58b~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-8QH4cRhC.webp",x="/blog.github.io/assets/fd6e6ae6e0454916b772d7f6402f2143~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-BELzwSyI.webp",R="/blog.github.io/assets/6e8674e738e145a6af6dcf5d43afe909~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-CahpJysK.webp",E="/blog.github.io/assets/2e61ecf9060d49fabad9699b06b85a3e~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-Bb6_FNcA.webp",V="/blog.github.io/assets/e4328e0c24784289ae518d4164f89a88~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-DtOVhOGs.webp",F="/blog.github.io/assets/e163d261da134940bd68841d2e9fc08e~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-CL2qRv7D.webp",S="/blog.github.io/assets/4586e1e6847e49f7ad4d778070513f30~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-Vp3vHQV4.webp",T="/blog.github.io/assets/a9ce66f6c7e547c890c5e15fe4bb2e71~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-B1V6VnTh.webp",I="/blog.github.io/assets/f9d9b961d876407db6b81efd8653cc3a~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-kuJVs8m-.webp",K="/blog.github.io/assets/5853b6cbfec641f592519215ad9bd741~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-5PpVppiU.webp",J="/blog.github.io/assets/bfbd1497d3744398869ca78d7c40ad43~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-CrpLcIlk.webp",p="/blog.github.io/assets/f336e59289b646dbb0bf557f9f9d6c1b~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-CoIvTnZb.webp",M="/blog.github.io/assets/882f1fd0c1904a02b40cbe58df429dff~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-BWjawB3I.webp",N="/blog.github.io/assets/3bb94acd55b342749e0b081e85b1da8e~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-USCzjomn.webp",O="/blog.github.io/assets/6197a3e79e784122b89e8ed0f6f7fc47~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-BLDz1FVj.webp",P="/blog.github.io/assets/750a0ff014574b6ea3332acdf086e5c0~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-RQpdFGrr.webp",L="/blog.github.io/assets/ca2297dcead64cb9b70e414c38683626~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-u2c0GAJg.webp",Q="/blog.github.io/assets/a03f8793737a4a4fb5df7d794b46c448~tplv-k3u1fbpfcp-jj-mark_1512_0_0_0_q75-Che1E8-o.webp",Y={};function z(G,s){return l(),n("div",null,s[0]||(s[0]=[e('<p>Vue、React 的项目怎么调试我们都知道了，这节我们来调试下 React 的源码。</p><p>把 react 和 react-dom 包下载了下来，在项目里引入，开发服务跑起来后，打开 Chrome Devtools 打断点调试。</p><p>你会发现调试的是 react-dom.development.js</p><p><img src="'+c+'" alt="img"></p><p>这是因为 react-dom 包下就是编译后的 react-dom.development.js 文件：</p><p><img src="'+t+'" alt="img"></p><p>而源码里这些逻辑是分散在不同的包里的，所以就算搞懂了逻辑，也不知道这些逻辑在哪些包里，只能靠搜索来定位。</p><p><img src="'+r+'" alt="img"></p><p>那怎么能够调试 React 最初的源码呢？</p><p>也就是这样的效果：</p><p><img src="'+h+'" alt="img"></p><p><img src="'+a+'" alt="img"></p><p>这就需要用到我们刚学的 sourcemap 的知识了：</p><h2 id="用-vscode-调试-react-项目" tabindex="-1"><a class="header-anchor" href="#用-vscode-调试-react-项目"><span>用 VSCode 调试 React 项目</span></a></h2><p>我们用 create-react-app 创建一个 react 项目，然后 npm run start 跑起来。</p><p>这时候浏览器访问就可以用 Chrome DevTools 调试了：</p><p><img src="'+k+'" alt="img"></p><p>但我们的目标是在 VSCode 里调试，所以要添加一个 VSCode 的 debugger 配置：</p><p><img src="'+d+'" alt="img"></p><p>然后点击 debug 启动：</p><p><img src="'+o+'" alt="img"></p><p>这时候就可以在 VSCode 里直接打断点调试了：</p><p><img src="'+m+'" alt="img"></p><p>用 VSCode 调试比 Chrome DevTools 方便一些，但现在调试的依然是 react-dom.development.js：</p><p><img src="'+g+'" alt="img"></p><p>那怎么调试 react 最初的源码呢？</p><p>这就涉及到 sourcemap 的作用了。但是现在下载的 react、react-dom 包里都不带 sourcemap，我们得把 React 源码下载下来自己 build：</p><h2 id="build-出带有-sourcemap-的-react-包" tabindex="-1"><a class="header-anchor" href="#build-出带有-sourcemap-的-react-包"><span>build 出带有 sourcemap 的 react 包</span></a></h2><p>用 npm 下载的 react 包是这样的：</p><p><img src="'+b+'" alt="img"></p><p>而我们需要的是带有 sourcemap 的代码，也就是这样的：</p><p><img src="'+u+`" alt="img"></p><p>这就要下载 react 源码自己 build 了：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">复制代码git</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">clone</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">https://github.com/facebook/react</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下载之后 reset 到这个 commit：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">css</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">复制代码git</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">reset</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">--hard</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">80f3d88190c07c2da11b5cac58a44c3b90fbc296</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我当时调试的时候 react 是 18.2，用的上面这个 commit。不确定后续会不会有构建脚本的变化，为了保证一定能正常生成 sourcemap，建议 reset 到和我同一个 commit。</p><p>下载下来的代码执行 npm run build 就能看到 build 的产物（先不用跑这一步）：</p><p><img src="`+_+'" alt="img"></p><p>这里的 build/node_modules 下的 react 和 react-dom 包就是我们需要的。</p><p>但是现在 build 出的代码并没有带 sourcemap，需要改造下 build 流程。</p><p><img src="'+v+'" alt="img"></p><p>build 命令执行的是 ./scripts/rollup/build.js，打开这个文件做一些修改。</p><p>找到 rollup 的配置，添加一行 sourcemap: true，这个很容易理解，就是让 rollup 在构建时产生 sourcemap：</p><p><img src="'+y+'" alt="img"></p><p>再跑 npm run build，会报这样的错误：</p><p><img src="'+f+'" alt="img"></p><p>某个转换的插件没有生成 sourcemap。</p><p>这个是因为构建的过程中会进行多次转换，会生成多次 sourcemap，然后把 sourcemap 串联起来就是最终的 sourcemap。如果中间有一步转换没有生成 sourcemap，那就断掉了，也就没法把 sourcemap 串联起来了。</p><p>这个问题的解决只要找出没有生成 sourcemap 的那几个插件注释掉就可以了：</p><p>在 getPlugins 方法里，把这样 5 个插件给注释掉：</p><p><img src="'+A+'" alt="img"></p><p>这个是删除 use strict 用的，可以去掉。</p><p><img src="'+B+'" alt="img"></p><p>这个是生产环境压缩代码的，也可以去掉。</p><p><img src="'+D+'" alt="img"></p><p>这个是用 prettier 格式化代码的，也可以去掉。</p><p><img src="'+j+'" alt="img"></p><p>这个是添加一些头部的代码的，比如 Lisence 等，也没啥用，可以去掉。</p><p>还有这个：</p><p><img src="'+C+'" alt="img"></p><p>去掉这 5 个插件之后，再运行 npm run build，这时候就能正常进行构建了，然后产生的代码就是带有 sourcemap 的：</p><p><img src="'+w+'" alt="img"></p><p><img src="'+q+'" alt="img"></p><p>这样我们就成功的 build 出了带有 sourcemap 的 react 包！</p><p>接下来只剩最后一步，用上 sourcemap，实现直接调试 React 最初的源码，</p><h2 id="应用-sourcemap-调试-react-最初的源码" tabindex="-1"><a class="header-anchor" href="#应用-sourcemap-调试-react-最初的源码"><span>应用 sourcemap，调试 React 最初的源码</span></a></h2><p>我们已经 build 除了带有 sourcemap 的 react 和 react-dom 包，那把这俩包复制到测试项目的 node_modules 下，就可以直接调试最初的源码了么？</p><p>还是不行。</p><p>为什么呢？</p><p><img src="'+x+'" alt="img"></p><p>因为我们虽然 build React 源码生成了 sourcemap，但是 webpack 打包的时候没有关联它啊，这样 webpack 的 sourcemap 就只能映射到 react-dom.development.js 不能进一步映射到源码了。</p><p>那怎么办呢？</p><p>这个问题有两种解决方式：</p><p>很容易想到的就是改下 sourcemap 的配置，这个我们上节刚学过，加上 module 的配置就能读取和关联 loader 的 sourcemap，然后一层层关联到源码了。</p><p>但是用 create-react-app 创建的项目，webpack 配置改起来比较麻烦，这种方式放后面讲。</p><p>还有一种方式就是不打包 react 和 react-dom 这俩包。用 script 标签单独引入，这样浏览器就会解析这俩文件各自的 sourcemap，进而映射到源码。</p><p>那怎么不打包这俩模块呢？</p><p>webpack 支持 externals 来配置一些模块使用全局变量而不进行打包，这样我们就可以单独加载 react、react-dom，然后把他们导出的全局变量配置到 externals 就行了。</p><p>要改动 webpack 配置的话，在 create-react-app 创建的项目下要执行 npm run eject。</p><p>然后项目下会多出 config 目录和 public 目录，这俩分别放着 webpack 配置和一些公共文件。</p><p>修改 webpack 配置，在 externals 下添加 react 和 react-dom 包对应的全局变量：</p><p><img src="'+R+'" alt="img"></p><p>然后把 react.development.js 和 react-dom.development.js 放到 public 下，并在 index.html 里面加载这俩文件：</p><p><img src="'+E+'" alt="img"></p><p>这样再重新 debug，你就会发现 sourcemap 映射到 React 最初的源码了：</p><p><img src="'+V+'" alt="img"></p><p>不再是 react-dom.development.js 下的代码，而是具体 react-xxx 包下的。</p><p>这就达到了最开始的目的，能直接调试 React 最初的源码！</p><p><img src="'+F+'" alt="img"></p><p>还记得我们这样做的意义么？</p><p>能调试最初的源码才能知道哪段逻辑是在哪个包里的，不然要自己去搜索。</p><p>这样已经能够达到我们的目的了，但是要想点击调用栈直接定位到 git clone 下来的 react 项目的文件，还需要再做一步。</p><h2 id="关联-react-源码项目" tabindex="-1"><a class="header-anchor" href="#关联-react-源码项目"><span>关联 react 源码项目</span></a></h2><p>看我最初演示的效果，点击调用栈是能直接定位到 react 源码项目的文件的：</p><p><img src="'+a+'" alt="img"></p><p>这是怎么做到的呢？</p><p>其实只要 sourcemap 生效，并且 map 到的文件是在当前 workspace 下，VSCode 就会打开对应的文件。</p><p>现在 sourcemap 已经生效了，只不过 react 项目没有在 workspace 下。所以，如果想直接定位 react 源码项目的话，可以这样做：</p><p><img src="'+S+'" alt="img"></p><p>创建一个新的目录，把 react 源码项目和测试的项目放到一个 workspace 下，这样再调试的时候，map 到的文件就能在 workspace 找到了，也就会打开相应的文件。</p><p>只不过现在 sourcemap 下都是这样的相对路径，会导致映射到的文件路径不对：</p><p><img src="'+T+'" alt="img"></p><p>所以再去修改下 react build 流程，在 ./script/rollup/build.js 下，添加一个 sourcemap 的路径映射，把 ../../../packages 映射到 react 项目的绝对路径/packages ：</p><p><img src="'+I+'" alt="img"></p><p>这时候再重新 build，生成的 sourcemap 就是绝对路径了：</p><p><img src="'+K+'" alt="img"></p><p>把 build 出的带有 sourcemap 的代码复制到项目的 node_modules 下，覆盖一下。这四个文件 react.development.js、react.development.js.map、react-dom.development.js、react-dom.development.js.map</p><p>在新的 workspace 里 debug，你就会发现，路径映射对了：</p><p><img src="'+J+'" alt="img"></p><p>点击调用栈能直接打开 react 源码项目的对应文件了！</p><p><img src="'+p+'" alt="img"></p><p>因为只要 sourcemap 映射到的文件在 workspace 下能找到，VSCode 就会把它打开并定位到对应行列号。</p><p><strong>更重要的是，现在就可以直接在 react 的 src 下打断点了，代码执行到那里就会断住，这是把 react 源码也放到 workspace 下的最大的好处。</strong></p><p>至此，我们就能优雅的调试 React 最初的源码了。</p><h2 id="让-webpack-的-sourcemap-映射回-react-源码" tabindex="-1"><a class="header-anchor" href="#让-webpack-的-sourcemap-映射回-react-源码"><span>让 webpack 的 sourcemap 映射回 React 源码</span></a></h2><p>前面我们通过 external 的方式走通了调试 React 源码的流程，这样是可以的，就是不算很优雅。</p><p>我们回过头来再来看一下，怎么能让 webpack 生成的 sourcemap 能一次性映射回 React 源码呢？</p><p>记得上节讲 webpack 配置的时候，讲到了 module 相关的配置么？</p><p><img src="'+M+'" alt="img"></p><p>module 配置的作用就是让 webpack 在生成模块的 sourcemap 的时候，读取下每个 loader 的 sourcemap，关联起来。</p><p>但是只有这样还不够，我们现在是 react 和 react-dom 包的代码本身有了 sourcemap，而且这些代码也不用经过 babel 的编译，所以还需要一个 source-map-loader 来把这些 sourcemap 读取出来，传递给后续的 loader：</p><p><img src="'+N+`" alt="img"></p><p>这样，webpack 的 sourcemap 就是直接映射到 React 源码的了。</p><p>我们不在 create-react-app 创建的项目里改，而是自己创建一个项目。</p><p>添加这样一个 webpack 配置文件：</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">javascript复制代码const</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">path</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">require</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">path</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">exports</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">entry</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./src/index.js</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">devtool</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">cheap-module-source-map</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">development</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">output</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">__dirname</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">dist</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">filename</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">bundle.js</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">rules</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">node_modules</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">loader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">source-map-loader</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#BDA437;--shiki-dark:#E6CC77;">\\.</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">jsx</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">?</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">$</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">include</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">__dirname</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./src</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">loader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">babel-loader</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>devtool 配置加上 module，这样会关联 loader 的 sourcemap。</p><p>source-map-loader 用来读取 node_modules 下代码的 sourcemap 传递给 webpack 的。</p><p>babel loader 是用来编译 jsx 代码的，添加这样一个 .babelrc 的配置文件：</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">javascript复制代码module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">exports</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">presets</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:[</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">@babel/preset-react</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>源码是这样：</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">javascript复制代码import</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">React</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">from</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ReactDOM</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">react-dom/client</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Aaa</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">debugger</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">return</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">dongdongdong</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">container</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">document</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getElementById</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">root</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">root</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ReactDOM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createRoot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">container</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">render</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">React</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createElement</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Aaa</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 html 里引入产物 bundle：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;!DOCTYPE</span><span class="space"> </span><span>html&gt;</span></span>
<span class="line"><span>&lt;html</span><span class="space"> </span><span>lang=&quot;en&quot;&gt;</span></span>
<span class="line"><span>&lt;head&gt;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>&lt;meta</span><span class="space"> </span><span>charset=&quot;UTF-8&quot;&gt;</span></span>
<span class="line"><span>&lt;/head&gt;</span></span>
<span class="line"><span>&lt;body&gt;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>&lt;div</span><span class="space"> </span><span>id=&quot;root&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>&lt;script</span><span class="space"> </span><span>src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span>&lt;/body&gt;</span></span>
<span class="line"><span>&lt;/html&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 webpack -c webpack.config.js 编译。</p><p>然后添加一个调试配置：</p><p><img src="`+O+'" alt="img"></p><p>把生成的 react、react-dom 的产物复制到 node_modules 下：</p><p><img src="'+P+'" alt="img"></p><p>点击 Debug 启动：</p><p><img src="'+L+'" alt="img"></p><p>这时候调用栈中的就是 React 的源码。</p><p>只不过因为现在 workspace 中没有对应的文件，可以用同样的方式把 react 源码项目和 demo 项目放到一个 workspace，然后再调试：</p><p><img src="'+p+'" alt="img"></p><p>这样就能调试 React 源码，并且直接在编辑器里打开对应的文件了。</p><p>这样直接修改了 node_modules 下的文件感觉不太好，下次安装就没了。</p><p>这个问题可以用 patch-package 解决：</p><p>执行 npx patch-package react-dom，就会生成这样的目录：</p><p><img src="'+Q+'" alt="img"></p><p>patches 目录下的就是每个包的 diff，在哪个文件添加了删除了什么代码。</p><p>执行 npm install 之后，执行一下 npx patch-packages 就会应用这些 patch 来修改 node_modules 下的包。</p><p>不过 patch-package 不支持 pnpm，所以只有你用 yarn 或 npm 安装的依赖才能用 patch-package。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>调试了下 React 源码，常规的调试方式只能调试 react-dom.development.js，虽然能理清逻辑，但是对应不到源码里的哪些包哪些文件，和最初的源码还有一段距离。</p><p>这个问题是有解决方案的，就是通过 sourcemap：</p><p>首先要把 react 源码项目下载下来，修改 build 流程来生成带有 sourcemap 的 react 和 react-dom 包，并且修改 sourcemap 映射的路径为绝对路径。</p><p>然后把 react 和 react-dom 配置到 webpack 的 externals 里，不进行打包，而是单独在 index.html 里引入。</p><p>这样调试的时候这俩模块的 sourcemap 就可以生效，直接映射回 React 源码。</p><p>当然，也可以自己建一个 React 项目，配置 webpack 的 devtool 为 module 相关的，这样会读取 loader 的 sourcemap，然后加上 source-map-loader 来读取源码的 sourcemap。</p><p>这样生成的 webpack 的 sourcemap 是直接可以映射到 React 源码的。</p><p>如果想点击调用栈直接打开对应 React 源码项目的文件，那就新建一个 workspace，把测试项目和 React 源码项目包含就行了。因为 VSCode 如果在 workspace 下找到了 source map 到的文件，就会直接打开对应的文件。这样就可以直接在源码打断点了。</p><p>这个流程是有点复杂，但其实都是围绕 sourcemap 来的，怎么生成 sourcemap，怎么让 sourcemap 生效，怎么找到 sourcemap 对应的文件等，理解了 sourcemap，也就很容易理解这个流程了。</p>',163)]))}const Z=i(Y,[["render",z],["__file","index.html.vue"]]),H=JSON.parse('{"path":"/article/txdfvuu2/","title":"VSCode-debugger-react","lang":"zh-CN","frontmatter":{"title":"VSCode-debugger-react","createTime":"2024/10/03 22:38:17","permalink":"/article/txdfvuu2/","tags":["Debugger","react"]},"headers":[],"readingTime":{"minutes":11.01,"words":3304},"git":{"updatedTime":1742544334000,"contributors":[{"name":"hello-xiaowu","username":"hello-xiaowu","email":"mvr46tx2fw@privaterelay.appleid.com","commits":4,"avatar":"https://avatars.githubusercontent.com/hello-xiaowu?v=4","url":"https://github.com/hello-xiaowu"}]},"filePathRelative":"docs/VSCode-debugger-react.md","categoryList":[{"id":"e3e2a9","sort":10000,"name":"docs"}]}');export{Z as comp,H as data};
